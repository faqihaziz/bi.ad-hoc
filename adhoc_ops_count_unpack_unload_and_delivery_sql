WITH
scan_record_main AS (

  WITH
scan_record_main AS (

SELECT
            currenttab.vehicle_tag_no,
            currenttab.waybill_no,
            currenttab.bag_no,
            option.option_name AS operation_type,
            currenttab.operation_branch_name AS operation_branch_name,
            DATETIME(currenttab.record_time,'Asia/Jakarta') AS record_time,
            LAG(currenttab.operation_branch_name,1) OVER (PARTITION BY currenttab.waybill_no ORDER BY currenttab.record_time) AS previous_branch_name,
            LEAD(currenttab.operation_branch_name) OVER (PARTITION BY currenttab.waybill_no ORDER BY currenttab.record_time) AS next_location_name,
            LEAD(currenttab.operation_branch_name,1) OVER (PARTITION BY currenttab.waybill_no ORDER BY currenttab.record_time) AS next_location_name_2,
            LEAD(currenttab.operation_branch_name,2) OVER (PARTITION BY currenttab.waybill_no ORDER BY currenttab.record_time) AS next_location_name_3,
            LEAD(currenttab.operation_branch_name,3) OVER (PARTITION BY currenttab.waybill_no ORDER BY currenttab.record_time) AS next_location_name_4,
            LEAD(currenttab.operation_branch_name,4) OVER (PARTITION BY currenttab.waybill_no ORDER BY currenttab.record_time) AS next_location_name_5,
            
            -- FROM `dev_idexp.dummy_count_awb_and_weight_from_vm` sc
            -- LEFT JOIN 
            FROM
                `datawarehouse_idexp.dm_waybill_waybill_line` AS currenttab --ON sc.vehicle_tag_no = currenttab.vehicle_tag_no

                -- AND DATE(currenttab.record_time,'Asia/Jakarta') BETWEEN '2023-10-01' AND '2024-02-20' 

                LEFT JOIN `datawarehouse_idexp.system_option` AS option ON currenttab.operation_type = option.option_value AND option.type_option = 'operationType'
                -- LEFT OUTER JOIN `datawarehouse_idexp.waybill_return_bill` rr ON currenttab.waybill_no = rr.waybill_no
                -- LEFT OUTER JOIN waybill_to_return rr ON currenttab.waybill_no = rr.waybill_no
                                                
            -- WHERE DATE(currenttab.record_time,'Asia/Jakarta') >= DATE(DATE_ADD(CURRENT_DATE(), INTERVAL -65 DAY))
            WHERE DATE(currenttab.record_time,'Asia/Jakarta') BETWEEN '2024-01-01' AND '2024-02-29' 
            -- AND DATE(currenttab.record_time,'Asia/Jakarta') < DATE(rr.return_confirm_record_time)
            AND currenttab.deleted = '0'

            -- AND currenttab.vehicle_tag_no IN (
               -- AND currenttab.waybill_no IN (
-- )

            ORDER BY record_time DESC
),

scan_record_fwd AS (

    SELECT 
    
    sc.waybill_no,
    sc.vehicle_tag_no,
    sc.bag_no,
    sc.operation_type,
    sc.operation_branch_name,
    sc.record_time,
    sc.previous_branch_name,
    sc.next_location_name,
    sc.next_location_name_2,
    sc.next_location_name_3,
    sc.next_location_name_4,
    sc.next_location_name_5,

    
    FROM scan_record_main sc
    LEFT OUTER JOIN `datawarehouse_idexp.waybill_return_bill` rr ON sc.waybill_no = rr.waybill_no
    -- WHERE DATE(record_time) <= DATE(rr.return_confirm_record_time)
    WHERE rr.return_confirm_record_time IS NULL
),

scan_record_return AS (

    SELECT 
    
    sc.waybill_no,
    sc.vehicle_tag_no,
    sc.bag_no,
    sc.operation_type,
    sc.operation_branch_name,
    sc.record_time,
    sc.previous_branch_name,
    sc.next_location_name,
    sc.next_location_name_2,
    sc.next_location_name_3,
    sc.next_location_name_4,
    sc.next_location_name_5,

    
    FROM scan_record_main sc
    LEFT OUTER JOIN `datawarehouse_idexp.waybill_return_bill` rr ON sc.waybill_no = rr.waybill_no
        
    WHERE DATE(record_time) <= DATE(rr.return_confirm_record_time)
    AND rr.return_confirm_record_time IS NOT NULL

),

join_scan_record AS (

SELECT * FROM (

SELECT * FROM scan_record_fwd UNION ALL
SELECT * FROM scan_record_return
)
-- QUALIFY ROW_NUMBER() OVER(PARTITION BY record_time)=1
)

-- SELECT * FROM join_scan_record
SELECT * FROM scan_record_main

ORDER BY record_time DESC

),

waybill_data AS (

  SELECT

  ww.waybill_no,
  ww.recipient_city_name,
  ww.recipient_province_name,
  kw.kanwil_name kanwil_area,

  FROM `datawarehouse_idexp.waybill_waybill` ww
  LEFT JOIN `datamart_idexp.mapping_kanwil_area` kw ON ww.recipient_province_name = kw.province_name

 WHERE DATE(ww.shipping_time,'Asia/Jakarta') >= DATE(DATE_ADD(CURRENT_DATE(), INTERVAL -186 DAY)) --BETWEEN '2024-01-01' AND '2024-01-31'
  AND ww.void_flag = '0' AND ww.deleted= '0' 

QUALIFY ROW_NUMBER() OVER (PARTITION BY ww.waybill_no ORDER BY ww.update_time DESC)=1
),

get_unpacking AS (

  SELECT
  sc.waybill_no,
  MAX(sc.operation_type) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) scan_type_1,
  MAX(sc.operation_branch_name) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) unpacking_branch,
  MAX(sc.record_time) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) unpacking_time,
  MAX(sc.next_location_name) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) next_location_name,
  -- MIN(sc.next_scan_time) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) next_scan_time_sending_fm,


  FROM scan_record_main sc
--   LEFT OUTER JOIN `datawarehouse_idexp.waybill_return_bill` rr ON sc.waybill_no = rr.waybill_no

  WHERE sc.operation_type = 'Unpacking scan'
  AND SUBSTR(operation_branch_name,1,2) IN ('TH','VH','VT','PD')
--   AND sc.record_time <= DATETIME(rr.return_confirm_record_time,'Asia/Jakarta')
  -- AND SUBSTR(sc.next_location_name,1,2) IN ('MH','DC')


QUALIFY ROW_NUMBER() OVER(PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC)=1

),

get_unloading AS (

  SELECT
  sc.waybill_no,
  MAX(sc.operation_type) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) scan_type_1,
  MAX(sc.operation_branch_name) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) unloadng_branch,
  MAX(sc.record_time) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) unloading_time,
  MAX(sc.next_location_name) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC) next_location_name,
  -- MIN(sc.next_scan_time) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) next_scan_time_sending_fm,


  FROM scan_record_main sc
--   LEFT OUTER JOIN `datawarehouse_idexp.waybill_return_bill` rr ON sc.waybill_no = rr.waybill_no

  WHERE sc.operation_type = 'Unloading scan'
  AND SUBSTR(operation_branch_name,1,2) IN ('TH','VH','VT','PD')

QUALIFY ROW_NUMBER() OVER(PARTITION BY sc.waybill_no ORDER BY sc.record_time DESC)=1

),

get_delivery_attempt as(

  SELECT
ps.waybill_no,
ps.deliv_attempt_1,
ps.deliv_attempt_2,
ps.deliv_attempt_3,

FROM (
  SELECT
        waybill_no,
        MAX(IF(id = 1, DATETIME(record_time), NULL)) AS deliv_attempt_1,
        MAX(IF(id = 2, DATETIME(record_time), NULL)) AS deliv_attempt_2,
        MAX(IF(id = 3, DATETIME(record_time), NULL)) AS deliv_attempt_3,

        FROM (
              SELECT sc.waybill_no, 
              sc.record_time, 
              sc.operation_type,
                        
              RANK() OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC ) AS id
              -- FROM `datawarehouse_idexp.waybill_waybill_line` sc
              FROM scan_record_main sc

              -- WHERE DATE(sc.record_time) >= DATE(DATE_ADD(CURRENT_DATE(), INTERVAL -45 DAY))
            WHERE sc.operation_type IN ('Delivery scan')
        ) 

        GROUP BY 1 
) ps
QUALIFY ROW_NUMBER() OVER (PARTITION BY ps.waybill_no)=1
),

get_delivery_scan AS (

  SELECT
  sc.waybill_no,
  MIN(sc.operation_type) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) scan_type_1,
  MIN(sc.operation_branch_name) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) delivery_branch,
  MIN(sc.record_time) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) delivery_time,
  MIN(sc.next_location_name) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) next_location_name,
  -- MIN(sc.next_scan_time) OVER (PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC) next_scan_time_sending_fm,


  FROM scan_record_main sc
--   LEFT OUTER JOIN `datawarehouse_idexp.waybill_return_bill` rr ON sc.waybill_no = rr.waybill_no

  WHERE sc.operation_type = 'Delivery scan'
  AND SUBSTR(operation_branch_name,1,2) IN ('TH','VH','VT','PD')

QUALIFY ROW_NUMBER() OVER(PARTITION BY sc.waybill_no ORDER BY sc.record_time ASC)=1

),

gabung_1_unpacking AS (

  SELECT

  waybill_no,
  -- recipient_city_name,
  -- recipient_province_name,
  -- kanwil_area,
  city_name,
    province_name,
    kanwil_name,
  CASE
      WHEN unpacking_branch IS NULL THEN unloadng_branch
      ELSE unpacking_branch END AS unpacking_branch_name,
  CASE
      WHEN unpacking_time IS NULL THEN unloading_time
      ELSE unpacking_time END AS unpacking_time,
  
  unpacking_alias,
  delivery_time,

FROM (

  SELECT

  ww.waybill_no,
  ww.recipient_city_name,
  ww.recipient_province_name,
  ww.kanwil_area,
  ul.unloadng_branch,
  unloading_time,
  up.unpacking_branch,
  up.unpacking_time,
  CASE
      WHEN up.unpacking_time IS NOT NULL THEN 1 ELSE 0 END AS unpacking_alias,
  -- dl.delivery_branch,
  -- dl.deliv_attempt_1 delivery_time,
  -- dl.delivery_time,
  0 AS delivery_time,
    kw.city_name,
  kw.province_name,
  kw.kanwil_name,


  FROM waybill_data ww
  LEFT JOIN get_unpacking up ON ww.waybill_no = up.waybill_no
  LEFT JOIN get_unloading ul ON ww.waybill_no = ul.waybill_no
  LEFT JOIN get_delivery_scan dl ON ww.waybill_no = dl.waybill_no
  LEFT JOIN `datamart_idexp.masterdata_facility_to_kanwil` kw ON up.unpacking_branch = kw.branch_name
  -- LEFT JOIN get_delivery_attempt dl ON ww.waybill_no = dl.waybill_no

  WHERE DATE(up.unpacking_time) BETWEEN '2024-01-01' AND '2024-02-29' 
)
),

gabung_2_deliv AS (

  SELECT

  waybill_no,
  -- recipient_city_name,
  -- recipient_province_name,
  -- kanwil_area,
  city_name,
    province_name,
    kanwil_name,
  NULL AS unpacking_branch_name,
  unpacking_alias,
  delivery_branch,
  delivery_time,
  delivery_alias,


FROM (

  SELECT

  ww.waybill_no,
  ww.recipient_city_name,
  ww.recipient_province_name,
  ww.kanwil_area,
  ul.unloadng_branch,
  unloading_time,
  up.unpacking_branch,
  up.unpacking_time,
  0 AS unpacking_alias,
  -- dl.delivery_branch,
  -- dl.deliv_attempt_1 delivery_time,
  dl.delivery_branch,
  dl.delivery_time,
CASE WHEN delivery_time IS NOT NULL THEN 1 ELSE 0 END AS delivery_alias,
  kw.city_name,
  kw.province_name,
  kw.kanwil_name,


  FROM waybill_data ww
  LEFT JOIN get_unpacking up ON ww.waybill_no = up.waybill_no
  LEFT JOIN get_unloading ul ON ww.waybill_no = ul.waybill_no
  LEFT JOIN get_delivery_scan dl ON ww.waybill_no = dl.waybill_no
  LEFT JOIN `datamart_idexp.masterdata_facility_to_kanwil` kw ON dl.delivery_branch = kw.branch_name
  -- LEFT JOIN get_delivery_attempt dl ON ww.waybill_no = dl.waybill_no
  WHERE DATE(dl.delivery_time) BETWEEN '2024-01-01' AND '2024-02-29' 
)
),

count_unpacking AS (

  SELECT

  DATE(a.unpacking_time) record_date,
  a.waybill_no,
  a.unpacking_branch_name branch_name,
  CASE
      WHEN a.city_name IS NULL THEN kw.city_name
      ELSE a.city_name
      END AS city_name,
  CASE
      WHEN a.province_name IS NULL THEN kw.province_name
      ELSE a.province_name
      END AS province_name,
  CASE
      WHEN a.kanwil_name IS NULL THEN kw.kanwil_name
      ELSE a.kanwil_name
      END AS kanwil_name,
  SUM(unpacking_alias) count_unpacking,
  SUM(delivery_time) count_deliv,

FROM gabung_1_unpacking a
LEFT JOIN `datamart_idexp.masterdata_facility_to_kanwil` kw ON a.unpacking_branch_name = kw.branch_name

GROUP BY 1,2,3,4,5,6

),

count_delivery AS (

  SELECT

  DATE(a.delivery_time) record_date,
  a.waybill_no,
  a.delivery_branch branch_name,
  CASE
      WHEN a.city_name IS NULL THEN kw.city_name
      ELSE a.city_name
      END AS city_name,
  CASE
      WHEN a.province_name IS NULL THEN kw.province_name
      ELSE a.province_name
      END AS province_name,
  CASE
      WHEN a.kanwil_name IS NULL THEN kw.kanwil_name
      ELSE a.kanwil_name
      END AS kanwil_name,
  SUM(unpacking_alias) count_unpacking,
  SUM(delivery_alias) count_deliv,


  FROM gabung_2_deliv a
  LEFT JOIN `datamart_idexp.masterdata_facility_to_kanwil` kw ON a.delivery_branch = kw.branch_name

  GROUP BY 1,2,3,4,5,6
),

count_all AS (

SELECT

record_date,
branch_name,
city_name,
province_name,
kanwil_name,
SUM(count_unpacking) count_unpacking,
SUM(count_deliv) count_deliv,

    FROM (

SELECT * FROM count_unpacking UNION ALL
SELECT * FROM count_delivery
    )

-- WHERE branch_name IN ('TH KEMBANGAN')

GROUP BY 1,2,3,4,5
)

SELECT * FROM count_all
-- SELECT * FROM count_leadtime_unpack_to_deliv
-- SELECT * FROM gabung_1_unpacking
WHERE branch_name IN ('TH KEMBANGAN')
-- ORDER BY unpacking_time ASC
ORDER BY record_date ASC


